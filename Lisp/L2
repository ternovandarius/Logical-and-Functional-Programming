;7. Return the level of a node X in a tree of type (1). The level of the root element is 0.
;type (1): (A 2 B 0 C 2 D 0 E 0) 

;find_tree({a1, l1, a2, l2, ..., an, ln}, el, level, return_level={}) = nil, if {a1, l1, ..., an, ln} is empty
;                                                                     = level, if a1==el
;                                                                     = nil, if l1==0 and return_level empty
;                                                                     = find_tree({a2, l2, ..., an, ln}, el, return_level[0], return_level\return_level[0]), if l1=0
;                                                                     = find_tree({a2, l2, ..., an, ln}, el, level+1, return_level U {level}*(l1-1), if l1>=2
;                                                                     = find_tree({a2, l2, ..., an, ln}, el, level+1, return_level, if l1=1

;handler({a1, l1, ..., an, ln}, el) = nil, if {a1,...ln} empty
;                                   = find_tree({a1,...,ln}, el, 0, {}), otherwise

(defun find_tree (l elem level return_level)
  (cond
      ((null l) nil);if list is empty, return nil
      ((equal (car l) elem) level) ;if the element is found, returns the level
      ((and (null return_level) (equal (cadr l) 0)) nil)
      ((equal (cadr l) 0) (find_tree (cddr l) elem (+ (car return_level) 1) (cdr return_level) )) ;has no children, so we go to next branch
      ((>= (cadr l) 2) (dotimes (n (- (cadr l) 1)) (setq return_level (cons level return_level)))  (find_tree (cddr l) elem (+ level 1) return_level )) ;has two children, we set it as a return level so we can go through its second branch
      ((equal (cadr l) 1) (find_tree (cddr l) elem (+ level 1) return_level))))

(defun handler (l elem)
  (cond
      ((null l) nil)
      (t (find_tree l elem 0 `()))))


;TEST CASES:
;(handler `(A 2 B 0 C 2 D 0 E 0) `E) should output 2
;(handler `(A 0) `A) should output 0
;(handler `(A 0) `B) should output NIL
;(handler `(A 2 B 2 D 0 E 1 F 2 G 0 H 0 C 2 I 0 J 1 K 0) `K) should output 3
;(handler `(A 2 B 2 D 0 E 1 F 2 G 0 H 0 C 2 I 0 J 1 K 0) `H) should output 4
;(handler `(A 3 B 0 C 0 D 3 E 0 F 0 G 0) `F) should output 2
;(handler `(A 2 B 3 C 1 D 2 E 1 X 2 Y 0 Z 0 F 0 G 0 H 0 I 0) `G) should output 2