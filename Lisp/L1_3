;c) Write a function to return the list of the first elements of all list elements of a given list with an odd
;number of elements at superficial level. Example:
; (1 2 (3 (4 5) (6 7)) 8 (9 10 11)) => (1 3 9).
;
;get_size({l1, ..., ln}) = 1+get_size({l2,...,ln}), n!=1
;                        = 1, n=1
;
;is_odd({l1, ..., ln}) = true, get_size({l1,...,ln})%2==1
;                      = false, get_size({l1,...,ln})%2==0
;
;first_elem({l1, ..., ln}) = {l1} U rest_elems({l2, ..., ln}), if is_odd(get_size({l1,...,ln})) true
;                          = rest_elems({l2, ..., ln}), if is_odd(get_size({l1,...,ln})) false
;                          = {}, if {l1,...,ln} empty
;
;rest_elems({l1, ..., ln}) = 

(defun get_size (l)
  (cond
    ((null l) 0)
    (t (+ 1 (get_size (cdr l))))))

(defun is_odd (s)
  (cond
    ((= (rem s 2) 1) t)
    ((= (rem s 2) 0) nil)))


(defun rest_elems (l)
  (cond
    ((null l) nil)
    ((listp (car l)) (first_elem (car l)))
    (t (rest_elems (cdr l)))))

(defun first_elem (l)
  (cond
    ((is_odd (get_size l)) (cons (car l) (rest_elems (cdr l))))
    ((null l) nil)
    (t (rest_elems (cdr l)))))